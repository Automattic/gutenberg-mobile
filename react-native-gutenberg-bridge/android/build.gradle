buildscript {
    def buildGutenbergMobileJSBundle =
            System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
            ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                    && rootProject.ext.buildGutenbergMobileJSBundle)

    repositories {
        jcenter()
        google()

        if (buildGutenbergMobileJSBundle) {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        if (buildGutenbergMobileJSBundle) {
            classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

def buildGutenbergMobileJSBundle =
        System.getenv('SUPPRESS_GUTENBERG_MOBILE_JS_BUNDLE_BUILD').asBoolean()
        ? false : (rootProject.ext.has("buildGutenbergMobileJSBundle")
                && rootProject.ext.buildGutenbergMobileJSBundle)

if (buildGutenbergMobileJSBundle) {
    println 'Building the Gutenberg Mobile JS bundle'

    apply plugin: 'com.moowork.node'

    node {
        // Version of node to use.
        version = '12.16.1'

        // Version of npm to use.
        npmVersion = '6.14.2'

        // Version of Yarn to use.
        yarnVersion = '1.22.4'

        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        def tmpdir = "${System.getenv('TMPDIR')}/jsbundle/${System.getenv('VERSION')}"

        // Set the work directory for unpacking node
        workDir = file("${tmpdir}/nodejs")

        // Set the work directory for NPM
        npmWorkDir = file("${tmpdir}/npm")

        // Set the work directory for Yarn
        yarnWorkDir = file("${tmpdir}/yarn")

        // Set the work directory where node_modules should be located
        nodeModulesDir = file("${project.projectDir}/../../")
    }

    yarn_install {
        args = ['--prefer-offline', '--network-concurrency 1']
    }
}

// import the `readReactNativeVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/742448b9588b3a0aa580a5e80ae95bdf/raw/8eb62d40ee7a5104d2fcaeff21ce6f29bd93b054/readReactNativeVersion.gradle'

// import the `readHashedVersion()` function
apply from: 'https://gist.githubusercontent.com/hypest/ceaf20a8e7d9b8404e4a5ff2e6c36650/raw/e1460a128e4b9863963410d719c7d44c3adefd02/readHashedVersion.gradle'

// import the `waitJitpack()` function
apply from: 'https://gist.githubusercontent.com/hypest/f526fe0775dedce0ce0133f1400d22a4/raw/0008b271a0d28fc79957fd3c2a027f57e98f796a/wait-jitpack.gradle'

group='com.github.wordpress-mobile.gutenberg-mobile'

// fallback flag value for when lib is compiled individually (e.g. via jitpack)
project.ext.buildGutenbergFromSource = false

def hermesOriginalPath = "../../node_modules/hermes-engine/android/";
def hermesPath = hermesOriginalPath;
def buildAssetsFolder = 'build/assets'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            assets.srcDirs += buildAssetsFolder
        }
    }
}

repositories {
    google()
    jcenter()

    maven { url "https://jitpack.io" }

    if (rootProject.ext.buildGutenbergFromSource) {
        // If building from source, use the local sources from node_modules
        def nodeModulesPath = "${project.buildDir}/../../../node_modules/"
        maven { url "${nodeModulesPath}/react-native/android" }
    } else {
        // If not building from source (e.g. Jitpack), use the bintray repo so a local RN setup is not needed
        def reactNativeRepo = 'https://dl.bintray.com/wordpress-mobile/react-native-mirror/'
        println "Will use the RN maven repo at ${reactNativeRepo}"
        maven { url reactNativeRepo }
    }
}

dependencies {
    implementation project(':react-native-aztec')

    implementation "org.wordpress:utils:1.22"

    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    if (rootProject.ext.buildGutenbergFromSource) {
        println "using gutenberg from source"
        implementation project(':react-native-linear-gradient')
        implementation project(':react-native-svg')
        implementation project(':react-native-video')
        implementation project(':@react-native-community_slider')

        implementation 'com.facebook.react:react-native:+'
    } else {
        hermesPath = "${projectDir}/../../bundle/android/";

        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-svg', readHashedVersion('../../package.json', 'react-native-svg', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-video', readHashedVersion('../../package.json', 'react-native-video', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-linear-gradient', readHashedVersion('../../package.json', 'react-native-linear-gradient', 'dependencies')))
        implementation (waitJitpack('com.github.wordpress-mobile', 'react-native-slider', readHashedVersion('../../package.json', '@react-native-community/slider', 'dependencies')))

        // FIXME Temporary fix to get Jitpack builds to green while I work on a solution without hardcoded values.
        //def rnVersion = readReactNativeVersion('../package.json', 'peerDependencies')
        def rnVersion = '0.61.5'
        implementation "com.facebook.react:react-native:${rnVersion}"
    }

    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
}

boolean isBundleUpToDate() {
    return project.hasProperty('isBundleUpToDate') && isBundleUpToDate
}

if (buildGutenbergMobileJSBundle) {
    def bundleName = 'index.android.bundle'
    def jsRootDir = '../..'

    task bundleUpToDateCheck {
        description("Checks if the inputs to the javascript bundle and the bundle itself are unchanged. \
Only if they are is the isBundleUpToDate flag set to true. That flag is used by other tasks.")

        def isRelevantFile = { it.name.endsWithAny('.js', '.css') || it.name == 'package.json' }
        def inputFiles = {
            def jsFiles = []
            def dirs = []
            file(jsRootDir).eachDir { dir ->
                if (dir.name != 'node_modules'
                        && dir.name != 'bundle'
                        && dir.name != 'gutenberg'
                        && !dir.name.startsWith('symlinked')) {
                    dirs << dir
                }
            }
            file("$jsRootDir/gutenberg").eachDir { dir ->
                if (dir.name != 'node_modules') {
                    dirs << dir
                }
            }

            dirs.forEach { dir ->
                file(dir).eachFileRecurse {
                    if (isRelevantFile(it)) {
                        jsFiles << it
                    }
                }
            }

            def jsRootDirFiles = file(jsRootDir).listFiles().findAll {
                isRelevantFile(it)
            }
            def gutenbergRootDirFiles = file("$jsRootDir/gutenberg").listFiles().findAll {
                isRelevantFile(it)
            }
            return jsFiles + jsRootDirFiles + gutenbergRootDirFiles
        }
        inputs.files(inputFiles())

        outputs.file("$buildAssetsFolder/$bundleName")

        // Having this task create this file as an output because changes to
        // the actual bundle (or even deleting the bundle file) was not triggering
        // this task to rerun (and flip the isBundleUpToDate flag to false). Now that
        // this second indicator file is here, which gets deleted if the project is cleaned,
        // this task knows that it is out of date. Note that if there are changes to the
        // bundle file though, that alone will not trigger this task to run again, so you'll
        // need to use --rerun-tasks in that case.
        def upToDateIndicatorFile = "$buildAssetsFolder/up-to-date-bundle-indicator"
        outputs.file(upToDateIndicatorFile)

        // set flag to true before task tries to run
        project.ext.isBundleUpToDate = true
        doLast {
            // If this task runs, either the inputs or outputs have changed, so the bundle is out of date.
            project.ext.isBundleUpToDate = false
            file(upToDateIndicatorFile).createNewFile()
        }
    }

    yarn_install.dependsOn bundleUpToDateCheck
    yarn_install.onlyIf { !isBundleUpToDate() }

    task buildJSBundle(type: YarnTask) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        args = ['bundle:android']
    }

    task backupHermesDebugAAR(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'hermes-debug.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes debug AARs"
        }
    }

    task backupHermesReleaseAAR(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'hermes-release.aar'
        def origWithPath = hermesOriginalPath + origFileName
        from origWithPath
        into hermesPath
        doLast {
            println "Done backing up Hermes release AARs"
        }
    }

    task copyJSBundle(type: Copy) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        def origFileName = 'App.js'
        def origWithPath = "../../bundle/android/${origFileName}"
        from origWithPath
        into buildAssetsFolder
        rename origFileName, bundleName
        doLast {
            println "Done copying the Android JS bundle to assets folder"
        }
    }

    task cleanupNodeModulesFolder(type: Delete) {
        dependsOn bundleUpToDateCheck
        onlyIf { !isBundleUpToDate() }

        delete '../../node_modules'
    }

    preBuild.dependsOn(cleanupNodeModulesFolder)
    cleanupNodeModulesFolder.dependsOn(backupHermesDebugAAR)
    backupHermesDebugAAR.dependsOn(backupHermesReleaseAAR)
    backupHermesReleaseAAR.dependsOn(copyJSBundle)
    copyJSBundle.dependsOn(buildJSBundle)
    buildJSBundle.dependsOn(yarn_install)
}
